// Generated by CoffeeScript 1.3.3
var MongoStore, TwitterStrategy, Users, config, express, init, mongoose, passport, twitterOpts, users;

passport = require("passport");

TwitterStrategy = (require("passport-twitter")).Strategy;

mongoose = require("mongoose");

MongoStore = require("connect-mongodb");

express = require("express");

config = require("./config");

Users = require("./controllers/users");

users = new Users;

twitterOpts = {
  consumerKey: "dNZoUXAururMB7mkPQkbfA",
  consumerSecret: "zLYa9YRukIHh5Lj2thM2PMau65HaGM1VPji68piKZZo",
  callbackURL: "http://tweetdvr.net/auth/twitter/callback"
};

init = function(app, sessionUrl) {
  var strat;
  if (sessionUrl == null) {
    sessionUrl = config.dbServer;
  }
  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function(id, done) {
    return users.findOne({
      id: id
    }, done);
  });
  strat = new TwitterStrategy(twitterOpts, function(token, tokenSecret, profile, done) {
    var displayName, id;
    id = profile.id, displayName = profile.displayName;
    return users.findOrCreate({
      id: id,
      displayName: displayName,
      token: token,
      tokenSecret: tokenSecret
    }, done);
  });
  passport.use(strat);
  app.use(express.cookieParser("cookie fart"));
  app.use(express.bodyParser());
  app.use(express.session({
    secret: "unicorn fart",
    maxAge: new Date(Date.now() + 3600000),
    store: new MongoStore({
      url: sessionUrl
    })
  }, function(err) {
    return console.log(err || "connect-mongodb setup ok");
  }));
  app.use(passport.initialize());
  app.use(passport.session());
  app.get('/auth/twitter', passport.authenticate('twitter'));
  return app.get('/auth/twitter/callback', passport.authenticate('twitter', {
    successRedirect: '/',
    failureRedirect: '/login'
  }));
};

module.exports = {
  init: init
};

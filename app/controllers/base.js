// Generated by CoffeeScript 1.3.3
var FindByUserController, ModelController,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ModelController = (function() {

  function ModelController(Model) {
    this.Model = Model;
  }

  ModelController.prototype.create = function(props, done) {
    var created;
    created = new this.Model(props);
    return created.save(function(err) {
      return done(err, created);
    });
  };

  ModelController.prototype.updateSingle = function(id, props, done) {
    return this.Model.update({
      _id: id
    }, props, done);
  };

  ModelController.prototype.update = function(query, action, done) {
    return this.Model.update(query, action, done);
  };

  ModelController.prototype.single = function(id, done) {
    return this.findOne({
      _id: id
    }, done);
  };

  ModelController.prototype.findOne = function(props, done) {
    return this.Model.findOne(props, done);
  };

  ModelController.prototype.remove = function(id, done) {
    return this.Model.remove({
      _id: id
    }, done);
  };

  return ModelController;

})();

FindByUserController = (function(_super) {

  __extends(FindByUserController, _super);

  function FindByUserController() {
    return FindByUserController.__super__.constructor.apply(this, arguments);
  }

  FindByUserController.prototype.forUser = function(userId, done) {
    return this.Model.find({
      userId: userId
    }, done);
  };

  return FindByUserController;

})(ModelController);

module.exports = {
  ModelController: ModelController,
  FindByUserController: FindByUserController
};
